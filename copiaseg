require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const { OpenAI } = require('openai');
//const cohere = require('cohere-ai');
const { CohereClient, CohereError, CohereTimeoutError } = require('cohere-ai');


// Conectar a MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log('Conectado a MongoDB');
  }).catch(err => {
    console.error('Error al conectar a MongoDB:', err);
  });

// Crear esquema de receta en MongoDB
const { Schema } = mongoose;
const recetaSchema = new Schema({
  nombre: { type: String, required: true },
  ingredientes: { type: [String], required: true },
  instrucciones: { type: String, required: true }
});
const Receta = mongoose.model('Receta', recetaSchema);

// Crear esquema de usuario con favoritos
const usuarioSchema = new Schema({
  userId: { type: Number, required: true, unique: true },
  favoritos: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Receta' }],
});
const Usuario = mongoose.model('Usuario', usuarioSchema);

// Esquema de Preguntas Frecuentes
const preguntaFrecuenteSchema = new Schema({
  pregunta: { type: String, required: true },
  respuesta: { type: String, required: true },
  cantidadConsultas: { type: Number, default: 1 }, // Cuántas veces se ha preguntado esta pregunta
});
const PreguntaFrecuente = mongoose.model('PreguntaFrecuente', preguntaFrecuenteSchema);

// Configuración del bot de Telegram
const telegramBot = new TelegramBot(process.env.TELEGRAM_API_KEY, { polling: true });

// Configuración de OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const cohere = new CohereClient({
  token: process.env.COHERE_API_KEY,
});
// Inicializa el cliente de Cohere
//cohere.init(process.env.COHERE_API_KEY);

// Función para verificar si el usuario es administrador
const isAdmin = (msg) => msg.from.id === parseInt(process.env.ADMIN_ID);

// Función para enviar un mensaje de feedback con opciones
function sendFeedback(chatId) {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "Sí", callback_data: "feedback_yes" },
          { text: "No", callback_data: "feedback_no" }
        ]
      ]
    }
  };
  telegramBot.sendMessage(chatId, "¿Te ha sido útil esta respuesta?", options);
}

// Función para interactuar con Cohere (generación de texto, respuestas, etc.)
async function generateResponse(question) {
  try {
    const response = await cohere.generate({
      model: 'command', // Puedes elegir el modelo que más te convenga
      prompt: question, // La pregunta o texto que el usuario ha enviado
    });
  // Imprimir la respuesta completa para depuración
  console.log('Respuesta de Cohere:', response);

      // Verificar que la respuesta tenga la estructura correcta
      if (response && response.body && response.body.generations && response.body.generations.length > 0) {
        // Acceder al primer texto generado
        const generatedText = response.body.generations[0].text.trim();
        
        // Si hay texto generado, devolverlo; si no, devolver mensaje de error
        return generatedText ? generatedText : response;
      } else {
        return 'Lo siento, no pude generar una respuesta.';
      }
    } catch (error) {
      console.error('Error generando respuesta con Cohere:', error);
      return 'Lo siento, hubo un error al procesar tu pregunta.';
    }
}

// Comando Chef!
telegramBot.onText(/Chef!/, (msg) => {
  const chatId = msg.chat.id;

  // Crear botones para las opciones
  const options = {
    reply_markup: {
      keyboard: [
        [{ text: "Buscar Recetas" }],
        [{ text: "Agregar Receta" }],
        [{ text: "Preguntar sobre Cocina" }],
        [{ text: "Ver recetas favoritas" }],
        [{ text: "Ver todas las recetas" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  };

  telegramBot.sendMessage(chatId, "Kaixo sukaldari! ¿Qué te gustaría hacer?", options);
});

// Responder a las opciones del menú
telegramBot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  if (!msg.text) return; // Si no tiene texto, no hacer nada

  const messageText = msg.text.trim().toLowerCase();

  //PREGUNTA SOBRE COCINA A COHERE
  if (messageText.includes("pregunta sobre cocina")) {
    const userQuestion = messageText.replace(/pregunta sobre cocina/i, '').trim();
    if (userQuestion) {
      const botResponse = await generateResponse(userQuestion);
      telegramBot.sendMessage(chatId, botResponse);
    } else {
      telegramBot.sendMessage(chatId, 'Por favor, formula una pregunta sobre cocina después de "pregunta sobre cocina".');
    }
  }

  // Responder a "Buscar Recetas"
  if (messageText === "buscar recetas") {
    telegramBot.sendMessage(chatId, "Por favor, escribe el nombre de un ingrediente o receta que te gustaría buscar.");
  } 
  // Responder a "Agregar Receta"
  else if (messageText === "agregar receta") {
    if (!isAdmin(msg)) {
      telegramBot.sendMessage(chatId, "No tienes permisos para agregar recetas.");
      return;
    }

    telegramBot.sendMessage(chatId, "¡Genial! Vamos a agregar una nueva receta. ¿Cómo se llama la receta?");
    telegramBot.once('message', (msg) => {
      const recetaNombre = msg.text;
      telegramBot.sendMessage(chatId, `Receta: ${recetaNombre}. Ahora, por favor, envíame los ingredientes (separados por coma, ej: "1 cebolla, 2 dientes de ajo"):`);

      telegramBot.once('message', (msg) => {
        const ingredientes = msg.text.split(',').map(ing => ing.trim());
        telegramBot.sendMessage(chatId, 'Perfecto. Ahora, ¿cuáles son las instrucciones para esta receta?');

        telegramBot.once('message', async (msg) => {
          const instrucciones = msg.text;

          // Guardar la receta en MongoDB
          const newReceta = new Receta({
            nombre: recetaNombre,
            ingredientes,
            instrucciones
          });

          try {
            await newReceta.save();
            telegramBot.sendMessage(chatId, `La receta "${recetaNombre}" se ha guardado correctamente.`);
          } catch (error) {
            telegramBot.sendMessage(chatId, 'Hubo un error al guardar la receta. Inténtalo más tarde.');
          }
        });
      });
    });
  } 
  
// Responder a "Preguntar sobre cocina"
else if (messageText === "preguntar sobre cocina") {
  telegramBot.sendMessage(chatId, "Por favor, escribe tu pregunta sobre cocina. Usa el formato: `pregunta [tu pregunta]`.");
  return;
}
// Preguntar sobre cocina
else if (messageText.toLowerCase().includes("pregunta")) {
  const userQuestion = messageText.replace(/pregunta/i, '').trim(); // Eliminar palabra "pregunta" y limpiar espacios

  if (userQuestion) {
    try {
      // Interacción con OpenAI
      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: userQuestion }],
      });

      if (response.choices && response.choices.length > 0) {
        const botResponse = response.choices[0].message.content;

        // Enviar respuesta al usuario
        telegramBot.sendMessage(chatId, botResponse);

        // Guardar esta pregunta y respuesta en la base de datos
        try {
          const newPreguntaFrecuente = new PreguntaFrecuente({
            pregunta: userQuestion,
            respuesta: botResponse,
          });
          await newPreguntaFrecuente.save();
        } catch (dbError) {
          console.error('Error al guardar pregunta frecuente:', dbError);
        }

// Preguntar al usuario por feedback
sendFeedback(chatId);
} else {
  telegramBot.sendMessage(chatId, 'No he podido generar una respuesta. Por favor, intenta nuevamente.');
}
} catch (error) {
// Manejo de errores específicos
if (error.code === 'insufficient_quota' || error.status === 429) {
  console.error('Límite alcanzado en OpenAI:', error);
  telegramBot.sendMessage(chatId, 'Lo siento, hemos alcanzado el límite de consultas. Por favor, intenta nuevamente más tarde.');
} else {
  console.error('Error al interactuar con OpenAI:', error);
  telegramBot.sendMessage(chatId, 'Lo siento, ocurrió un error al consultar OpenAI. Intenta nuevamente más tarde.');
}
}
} else {
telegramBot.sendMessage(chatId, "Por favor, haz una pregunta sobre cocina después de la palabra 'pregunta'.");
}

// Detener el flujo para que no procese otras condiciones
return;
}

// Ver recetas favoritas
else if (messageText === "ver recetas favoritas") {
  const user = await Usuario.findOne({ userId: msg.from.id });
  if (user && user.favoritos.length > 0) {
    const recetas = await Receta.find({ '_id': { $in: user.favoritos } });

    for (const receta of recetas) {
      // Crear botones para cada receta
      const inlineKeyboard = [
        [
          {
            text: "Eliminar de Favoritos",
            callback_data: `remove_fav_${receta._id}`,
          }
        ]
      ];

      // Enviar un mensaje para cada receta favorita
      await telegramBot.sendMessage(
        chatId,
        `*${receta.nombre}*\nIngredientes: ${receta.ingredientes.join(', ')}\nInstrucciones: ${receta.instrucciones}`,
        {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard },
        }
      );
    }
  } else {
    // Si no tiene recetas favoritas
    telegramBot.sendMessage(chatId, "No tienes recetas favoritas guardadas.");
  }
}
else if (messageText === "ver todas las recetas") {
  try {
    // Buscar todas las recetas
    const recetas = await Receta.find();

    if (recetas.length > 0) {
      // Obtener los favoritos del usuario
      const user = await Usuario.findOne({ userId: msg.from.id });
      
      // Si el usuario no existe en la base de datos, lo creamos
      if (!user) {
        user = new Usuario({ userId: msg.from.id, favoritos: [] });
        await user.save();
      }

      // Enviar cada receta con botones para agregar o eliminar de favoritos
      for (const receta of recetas) {
        // Verificar si la receta está en los favoritos
        const isFavorite = user.favoritos.includes(receta._id);

        // Crear los botones para agregar o eliminar de favoritos
        const inlineKeyboard = [
          [
            {
              text: isFavorite ? "Eliminar de Favoritos" : "Agregar a Favoritos",
              callback_data: isFavorite 
                ? `remove_fav_${receta._id}` 
                : `add_fav_${receta._id}`
            }
          ]
        ];

        // Enviar el mensaje con la receta y los botones
        await telegramBot.sendMessage(
          chatId,
          `*${receta.nombre}*\nIngredientes: ${receta.ingredientes.join(', ')}\nInstrucciones: ${receta.instrucciones}`,
          {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: inlineKeyboard },
          }
        );
      }
    } else {
      telegramBot.sendMessage(chatId, 'No hay recetas disponibles aún.');
    }
  } catch (error) {
    console.error('Error al obtener las recetas:', error);
    telegramBot.sendMessage(chatId, 'Lo siento, ocurrió un error al intentar obtener las recetas.');
  }
}


// Buscar recetas por ingredientes o nombre
else if (messageText !== "chef!" && messageText !== "buscar recetas" && !messageText.startsWith('pregunta sobre cocina')) {
  try {
    // Realizar una búsqueda con regex tanto en nombre como en los ingredientes del array o las etiquetas de la receta
    const recetas = await Receta.find({
      $or: [
        { nombre: { $regex: messageText, $options: 'i' } },  // Buscar por nombre de receta
        { ingredientes: { $in: [new RegExp(messageText, 'i')] } },  // Buscar por cualquier ingrediente que coincida
        { etiquetas: { $in: [new RegExp(messageText, 'i')] } }  // Buscar por etiquetas
      ],
    });

    // Si encontramos recetas
    if (recetas.length > 0) {
      const user = await Usuario.findOne({ userId: msg.from.id });

      for (const receta of recetas) {
        // Determinar si la receta ya está en favoritos
        const isFavorite = user ? user.favoritos.includes(receta._id) : false;

        // Crear botones para la receta
        const inlineKeyboard = [
          [
            {
              text: isFavorite ? "Eliminar de Favoritos" : "Agregar a Favoritos",
              callback_data: isFavorite ? `remove_fav_${receta._id}` : `add_fav_${receta._id}`,
            }
          ]
        ];

        // Enviar mensaje con receta y botones
        await telegramBot.sendMessage(
          chatId,
          `*${receta.nombre}*\nIngredientes: ${receta.ingredientes.join(', ')}\nInstrucciones: ${receta.instrucciones}`,
          {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: inlineKeyboard },
          }
        );
      }
    } else {
      // Si no encontramos recetas
      telegramBot.sendMessage(chatId, 'Lo siento, no encontré ninguna receta con ese nombre o ingrediente.');
    }
  } catch (error) {
    telegramBot.sendMessage(chatId, 'Lo siento, ocurrió un error. Intenta nuevamente más tarde.');
  }
}



});


// Gestionar la acción de los botones inline (agregar o eliminar favoritos)
telegramBot.on('callback_query', async (callbackQuery) => {
  const userId = callbackQuery.from.id;
  const recetaId = callbackQuery.data.split('_')[2]; // Obtener el ID de la receta

  const receta = await Receta.findById(recetaId);
  let user = await Usuario.findOne({ userId });

  if (!user) {
    user = new Usuario({ userId, favoritos: [] });
  }

  if (callbackQuery.data.startsWith('add_fav_')) {
    if (!user.favoritos.includes(receta._id)) {
      user.favoritos.push(receta._id);
      await user.save();
      telegramBot.answerCallbackQuery(callbackQuery.id, {
        text: `Receta "${receta.nombre}" agregada a favoritos.`,
      });
    } else {
      telegramBot.answerCallbackQuery(callbackQuery.id, {
        text: `La receta "${receta.nombre}" ya está en tus favoritos.`,
      });
    }
  } else if (callbackQuery.data.startsWith('remove_fav_')) {
    const index = user.favoritos.indexOf(receta._id);
    if (index !== -1) {
      user.favoritos.splice(index, 1);
      await user.save();
      telegramBot.answerCallbackQuery(callbackQuery.id, {
        text: `Receta "${receta.nombre}" eliminada de tus favoritos.`,
      });
    } else {
      telegramBot.answerCallbackQuery(callbackQuery.id, {
        text: `La receta "${receta.nombre}" no está en tus favoritos.`,
      });
    }
  }
});
