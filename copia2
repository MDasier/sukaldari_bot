require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');

// Conectar a MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log('Conectado a MongoDB');
  }).catch(err => {
    console.error('Error al conectar a MongoDB:', err);
  });

// Crear esquema de receta en MongoDB
const { Schema } = mongoose;
const recetaSchema = new Schema({
  nombre: { type: String, required: true },
  ingredientes: { type: [String], required: true },
  instrucciones: { type: String, required: true }
});
const Receta = mongoose.model('Receta', recetaSchema);

// Configuración del bot de Telegram
const telegramBot = new TelegramBot(process.env.TELEGRAM_API_KEY, { polling: true });

// Comando /start con menú de opciones
telegramBot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // Crear botones para las opciones
  const options = {
    reply_markup: {
      keyboard: [
        [{ text: "Buscar Recetas" }],
        [{ text: "Agregar Receta" }],
        [{ text: "Preguntar sobre Cocina" }],
        [{ text: "Ver recetas favoritas" }],
      ],
      resize_keyboard: true,  // Ajusta el tamaño de los botones
      one_time_keyboard: true, // Oculta el teclado después de usarlo
    },
  };

  telegramBot.sendMessage(chatId, "¡Bienvenido! ¿Qué te gustaría hacer?", options);
});

// Respuesta al seleccionar "Buscar Recetas"
telegramBot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text.trim().toLowerCase();

  if (messageText === "buscar recetas") {
    telegramBot.sendMessage(chatId, "Por favor, escribe el nombre de un ingrediente o receta que te gustaría buscar.");
  } else if (messageText === "agregar receta") {
    telegramBot.sendMessage(chatId, "¡Vamos a agregar una nueva receta! Escribe el nombre de la receta. (Solo los admin*)");
  } else if (messageText === "preguntar sobre cocina") {
    telegramBot.sendMessage(chatId, "¿Qué te gustaría saber sobre cocina? ¡Hazme una pregunta!");
  } else if (messageText === "ver recetas favoritas") {
    // Aquí podrías agregar lógica para mostrar recetas favoritas si tienes una funcionalidad implementada
    telegramBot.sendMessage(chatId, "Aquí están tus recetas favoritas: (Por ahora no tengo recetas favoritas almacenadas).");
  } else if (messageText && !messageText.startsWith('/')) {
    // Respuesta para buscar recetas por ingredientes o nombre
    try {
      const recetas = await Receta.find({
        $or: [
          { nombre: { $regex: messageText, $options: 'i' } },
          { ingredientes: { $regex: messageText, $options: 'i' } }
        ],
      });

      if (recetas.length > 0) {
        const response = recetas.map((receta) => `
          *${receta.nombre}*
          Ingredientes: ${receta.ingredientes.join(', ')}
          Instrucciones: ${receta.instrucciones}
        `).join('\n\n');

        telegramBot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      } else {
        telegramBot.sendMessage(chatId, 'Lo siento, no encontré ninguna receta con ese nombre o ingrediente.');
      }
    } catch (error) {
      telegramBot.sendMessage(chatId, 'Lo siento, ocurrió un error. Intenta nuevamente más tarde.');
    }
  }
});


// Comando /recetas para listar recetas
telegramBot.onText(/\/recetas/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const recetas = await Receta.find();
    if (recetas.length > 0) {
      const response = recetas.map((receta) => `*${receta.nombre}*`).join('\n');
      telegramBot.sendMessage(chatId, `Aquí tienes algunas recetas:\n\n${response}`, { parse_mode: 'Markdown' });
    } else {
      telegramBot.sendMessage(chatId, 'Aún no tenemos recetas guardadas.');
    }
  } catch (error) {
    telegramBot.sendMessage(chatId, 'Lo siento, ocurrió un error al obtener las recetas.');
  }
});

// Agregar receta
telegramBot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text.trim().toLowerCase();

  if (messageText === "agregar receta") {
    telegramBot.sendMessage(chatId, "¡Genial! Vamos a agregar una nueva receta. ¿Cómo se llama la receta?");
    
    telegramBot.once('message', (msg) => {
      const recetaNombre = msg.text;
      telegramBot.sendMessage(chatId, `Receta: ${recetaNombre}. Ahora, por favor, envíame los ingredientes (separados por coma, ej: "1 cebolla, 2 dientes de ajo"):`);

      telegramBot.once('message', (msg) => {
        const ingredientes = msg.text.split(',').map(ing => ing.trim());
        telegramBot.sendMessage(chatId, 'Perfecto. Ahora, ¿cuáles son las instrucciones para esta receta?');

        telegramBot.once('message', async (msg) => {
          const instrucciones = msg.text;

          // Guardar la receta en MongoDB
          const newReceta = new Receta({
            nombre: recetaNombre,
            ingredientes,
            instrucciones
          });

          try {
            await newReceta.save();
            telegramBot.sendMessage(chatId, `La receta "${recetaNombre}" se ha guardado correctamente.`);
          } catch (error) {
            telegramBot.sendMessage(chatId, 'Hubo un error al guardar la receta. Inténtalo más tarde.');
          }
        });
      });
    });
  }
});

// Búsqueda de recetas por ingredientes
telegramBot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text.toLowerCase().trim();

  if (messageText && !messageText.startsWith('/')) {

    try {
      // Crear una expresión regular para buscar dentro de las cadenas de texto (ingredientes completos)
      const ingredientesBusqueda = messageText.split(',').map(ing => ing.trim()).join('|'); // Unir los ingredientes con OR

      const recetas = await Receta.find({
        ingredientes: { $regex: ingredientesBusqueda, $options: 'i' } // Buscar dentro de las frases de ingredientes
      });

      if (recetas.length > 0) {
        const response = recetas.map((receta) => `
          *${receta.nombre}*
          Ingredientes: ${receta.ingredientes.join(', ')}
          Instrucciones: ${receta.instrucciones}
        `).join('\n\n');

        telegramBot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      } else {
        telegramBot.sendMessage(chatId, 'Lo siento, no encontré ninguna receta que contenga esos ingredientes.');
      }
    } catch (error) {
      telegramBot.sendMessage(chatId, 'Lo siento, ocurrió un error. Intenta nuevamente más tarde.');
    }
  }
});

// Comando para interactuar con OpenAI
/*
telegramBot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text.trim().toLowerCase();

  // Comando para preguntar a OpenAI
  if (messageText.startsWith('pregunta')) {
    try {
      // Eliminar el prefijo "pregunta" y enviar el resto al modelo OpenAI
      const userQuestion = messageText.replace('pregunta', '').trim();

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo', 
        messages: [{ role: 'user', content: userQuestion }],
      });

      const botResponse = response.choices[0].message.content;
      telegramBot.sendMessage(chatId, botResponse);
    } catch (error) {
      console.error('Error al interactuar con OpenAI:', error);
      telegramBot.sendMessage(chatId, 'Lo siento, ocurrió un error. Intenta nuevamente más tarde.');
    }
  }
});
*/